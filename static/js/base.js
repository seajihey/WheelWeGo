/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./js/base.js":
/*!********************!*\
  !*** ./js/base.js ***!
  \********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _extendsTools_initmap_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./extendsTools/initmap.js */ \"./js/extendsTools/initmap.js\");\n/* harmony import */ var _extendsTools_drawShape_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./extendsTools/drawShape.js */ \"./js/extendsTools/drawShape.js\");\n/* harmony import */ var _extendsTools_currentPos_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./extendsTools/currentPos.js */ \"./js/extendsTools/currentPos.js\");\n/* harmony import */ var _extendsTools_search_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./extendsTools/search.js */ \"./js/extendsTools/search.js\");\n/* harmony import */ var _extendsTools_loading_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./extendsTools/loading.js */ \"./js/extendsTools/loading.js\");\n\r\n\r\n\r\n\r\n\r\n\r\nclass MapBase{\r\n    constructor(){\r\n        this.maptool = new _extendsTools_initmap_js__WEBPACK_IMPORTED_MODULE_0__.InitMap();\r\n        this.currentPos = new _extendsTools_currentPos_js__WEBPACK_IMPORTED_MODULE_2__.CurrentPos();\r\n        this.drawShape = new _extendsTools_drawShape_js__WEBPACK_IMPORTED_MODULE_1__.DrawShape();\r\n        this.searchTool = new _extendsTools_search_js__WEBPACK_IMPORTED_MODULE_3__.Search();\r\n        this.loading = new _extendsTools_loading_js__WEBPACK_IMPORTED_MODULE_4__.Loading();\r\n\r\n        this.map;\r\n        this.currentLat, this.currentLon;\r\n        this.centerCircle;\r\n        this.istrackingCenter = true;\r\n        this.start();\r\n    }\r\n\r\n    start(){\r\n        this.initSetMap();\r\n        this.sideBar();\r\n        this.searchTool.focusSearchBox();\r\n    }\r\n\r\n    // 현재 위치가 갱신 될때 마다 실행 하는 함수\r\n    update(position){\r\n        const latitude = position.coords.latitude;\r\n        const longitude = position.coords.longitude;\r\n    \r\n        this.searchTool.setPosition(latitude, longitude);\r\n\r\n        // 현재 위치로 이동 및 원으로 표시\r\n        this.updateSetCenterCircle(latitude, longitude);\r\n    }\r\n\r\n    catchAnotherResionMap(){\r\n        const mapCenterPos = this.map.getCenter();\r\n        const currentPos = new Tmapv3.LatLng(this.currentLat, this.currentLon);\r\n\r\n        const dist = mapCenterPos.distanceTo(currentPos);\r\n\r\n        if(dist > 100){\r\n            this.returnToCurPos();\r\n        }\r\n    }\r\n\r\n    updateSetCenterCircle(latitude, longitude){\r\n        if(this.istrackingCenter){\r\n            const newPosition = new Tmapv3.LatLng(latitude, longitude);\r\n            this.map.setCenter(newPosition);\r\n\r\n            if(this.centerCircle){\r\n               this.centerCircle = this.drawShape.moveCircle(this.centerCircle, latitude, longitude);\r\n            }\r\n            else{\r\n                this.centerCircle = this.drawShape.addCircle(latitude, longitude, 3);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    initSetMap(){\r\n        const loader_text = document.querySelector(\".loader_text\");\r\n\r\n        this.loading.loadAppear();\r\n\r\n        this.currentPos.getCurrentLocation().then((position)=>{\r\n            this.currentLat = position.coords.latitude;\r\n            this.currentLon = position.coords.longitude;\r\n            console.log(\"받아온 좌표 : \",this.currentLat, this.currentLon);\r\n            \r\n            loader_text.textContent = \"T맵 가져와서 그리는 중 ...\";\r\n\r\n            this.maptool.createTmap(this.currentLat, this.currentLon)\r\n            .then((map)=>{\r\n                this.map = map;\r\n\r\n                map.on(\"ConfigLoad\", ()=>{  \r\n                    this.drawShape.setMap(map);\r\n                    this.searchTool.setMap(map);\r\n\r\n                    //받아온 좌표로 map 중심 맞추기\r\n                    this.maptool.setMapCenter(map, this.currentLat, this.currentLon);\r\n\r\n                    // map을 클릭하면 현재위치를 센터링 하지말고 맵이 움직이게\r\n                    map.on(\"DragStart\", ()=>{\r\n                       this.returnToCurPos();\r\n                    });\r\n\r\n                    //map Center가 100m 벗어나면 현위치로 이동 버튼 나타내기\r\n                    setInterval(()=>{\r\n                        this.catchAnotherResionMap();\r\n                    }, 1000);\r\n\r\n                    //loading 지우기\r\n                    this.loading.loadDisAppear();\r\n                    \r\n                    //현재위치 계속 추적\r\n                    this.watchid = this.currentPos.watchLocation(this.update.bind(this));\r\n                }); \r\n            });\r\n        });\r\n    }\r\n\r\n    returnToCurPos(){\r\n        this.istrackingCenter = false;\r\n                        \r\n        const returnToCurPosBtn = document.querySelector(\".returnToCurPosBtn\"); \r\n        returnToCurPosBtn.classList.toggle(\"unactive\", false);\r\n\r\n        // 현재위치로 돌아오기 클릭시\r\n        returnToCurPosBtn.addEventListener(\"click\", ()=>{\r\n            console.log(\"현재 위치 : \",  this.currentLat, this.currentLon);\r\n            this.istrackingCenter = true;\r\n            returnToCurPosBtn.classList.toggle(\"unactive\", true);\r\n            \r\n            this.maptool.setMapCenter(this.map, this.currentLat, this.currentLon);\r\n        });\r\n    }\r\n\r\n    stopWatchLocation(){\r\n        navigator.geolocation.clearWatch(this.watchid);\r\n    }\r\n\r\n    startWatchLocation(){\r\n        this.watchid = this.currentPos.watchLocation(this.update.bind(this));\r\n    }\r\n\r\n    sideBar(){\r\n        const sideBarBtn = document.querySelector('.sideBarBtn');\r\n        const sideBar = document.querySelector('.sideBar');\r\n        const sideBar_cancle = document.querySelector('.sideBar_cancle')\r\n                   \r\n        // 사이드 바 나타내기\r\n        sideBarBtn.addEventListener(\"click\", ()=>{\r\n            sideBar.classList.toggle('unactive', false);\r\n        });\r\n \r\n        sideBar_cancle.addEventListener('click', ()=>{\r\n            sideBar.classList.toggle('unactive', true);\r\n        });\r\n    }\r\n}\r\n\r\nwindow.onload = ()=>{\r\n    new MapBase();\r\n}\n\n//# sourceURL=webpack://wheel_we_go/./js/base.js?");

/***/ }),

/***/ "./js/extendsTools/currentPos.js":
/*!***************************************!*\
  !*** ./js/extendsTools/currentPos.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CurrentPos: () => (/* binding */ CurrentPos)\n/* harmony export */ });\nclass CurrentPos{\r\n    constructor(){\r\n     \r\n    }\r\n    \r\n    watchLocation(success){\r\n        if (navigator.geolocation) {\r\n            const watchid = navigator.geolocation.watchPosition(\r\n                success\r\n                , ()=>{\r\n                    console.error(`ERROR(${err.code}): ${err.message}`);\r\n                }, {\r\n                    enableHighAccuracy: true,\r\n                    timeout: 5000,\r\n                    maximumAge: 0,\r\n                });\r\n            return watchid;\r\n        }\r\n    }   \r\n    \r\n\r\n    async getCurrentLocation() {\r\n        const location = new Promise((resolve, reject) => {\r\n            if (navigator.geolocation) {\r\n                navigator.geolocation.getCurrentPosition(resolve, reject);\r\n            } else {\r\n                reject(new Error('Geolocation이 지원되지 않는 브라우저입니다.'));\r\n            }\r\n        })\r\n        .catch(error => {\r\n            console.error('오류:', error.message);\r\n        });;\r\n\r\n        const timeout = new Promise((resolve, reject)=>{\r\n            setTimeout(()=>{\r\n                //AT센터로 좌표 이동..\r\n                this.init_position = {\r\n                    coords :{    \r\n                        latitude : 37.468478,\r\n                        longitude : 127.039257,\r\n                    }                \r\n                }\r\n                console.log(\"시간이 지났어요...\");\r\n                resolve(this.init_position);\r\n            }, 15000);\r\n        })\r\n\r\n        return Promise.race([location, timeout]);\r\n    }\r\n}\n\n//# sourceURL=webpack://wheel_we_go/./js/extendsTools/currentPos.js?");

/***/ }),

/***/ "./js/extendsTools/drawShape.js":
/*!**************************************!*\
  !*** ./js/extendsTools/drawShape.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DrawShape: () => (/* binding */ DrawShape)\n/* harmony export */ });\nclass DrawShape{\r\n    constructor(){\r\n\r\n    }\r\n\r\n    setMap(map){\r\n        this.map = map;\r\n    }\r\n\r\n    //원\r\n    addCircle(lat, lon, radius){\r\n        const circle = new Tmapv3.Circle({\r\n\t\t\tcenter: new Tmapv3.LatLng(lat, lon),\r\n            fillColor : \"#027bfc\",\r\n\t\t\tradius: radius,\r\n            strokeColor :\"#FFFFFF\",\r\n            strokeWeight : 2,\r\n\t\t\tmap: this.map\r\n\t\t});\r\n\r\n        return circle;\r\n    }\r\n\r\n    //원 위치 변경\r\n    moveCircle(circle, lat, lon){\r\n        console.log(circle);\r\n        const newCircle = new Tmapv3.Circle({\r\n\t\t\tcenter: new Tmapv3.LatLng(lat, lon),\r\n\t\t\tradius: circle._shape_data.radius,\r\n            fillColor : \"#027bfc\",\r\n            strokeColor :\"#FFFFFF\",\r\n            strokeWeight : 2,\r\n            map: this.map\r\n\t\t});\r\n\r\n        circle.setMap(null);\r\n\r\n        return newCircle;\r\n    }\r\n\r\n    //선\r\n\taddPolyline(startLat, startLon, endLat, endLon, strokeWeight, color){\r\n\t\tconst polyline = new Tmapv3.Polyline({\r\n\t\t\tpath: [new Tmapv3.LatLng(startLat, startLon),\t// 선의 꼭짓점 좌표\r\n\t\t\t\tnew Tmapv3.LatLng(endLat, endLon),\t// 선의 꼭짓점 좌표\r\n            ],\r\n\t\t\tstrokeColor: color,\r\n\t\t\tstrokeWeight: strokeWeight,\r\n\t\t\tmap: this.map\r\n\t\t});\r\n        \r\n\r\n        return polyline\r\n    }\r\n\r\n    //선 지우기\r\n    deletePolyline(polyline){\r\n        polyline.setMap(null);\r\n    }\r\n\r\n    drawPath(coords){\r\n        let pre_position;\r\n\r\n        coords.forEach( position => {\r\n            let cur_lat = position[0];\r\n            let cur_lon = position[1];\r\n\r\n            if(pre_position){\r\n                let pre_lat = pre_position[0];\r\n                let pre_lon = pre_position[1];\r\n\r\n                this.addPolyline(pre_lat, pre_lon, cur_lat, cur_lon);\r\n                pre_position = position;\r\n            }else{\r\n                pre_position = position;\r\n            }\r\n        });\r\n    }\r\n    \r\n    //사각형\r\n\taddRectangle(maxLat, maxLon, minLat, minLon, strokeWeight, color){\r\n\t\tconst rect = new Tmapv3.Rectangle({\r\n            bounds: new Tmapv3.LatLngBounds(new Tmapv3.LatLng(minLat, minLon), new Tmapv3.LatLng(maxLat, maxLon)),\r\n            fillColor: color,\r\n            strokeWeight : strokeWeight,\r\n            map: this.map\r\n\t\t});\r\n\r\n        return rect;\r\n\t}\r\n\r\n    //다각형\r\n\taddPolygon(pointArray, strokeWeight, color){\r\n        //pointArray: [(위도1, 경도1), (위도2, 경도2) ...]\r\n        let newpaths = [];\r\n        pointArray.forEach(ele => {\r\n            const pointLat = ele[0];\r\n            const pointLon = ele[1];\r\n            const newPoint = new Tmapv3.LatLng(pointLat, pointLon);\r\n\r\n            newpaths.push(newPoint);\r\n        });\r\n\r\n\t\tconst polygon = new Tmapv3.Polygon({\r\n\t\t\tpaths: newpaths,\r\n\t\t    fillColor: color,\r\n\t\t    strokeWeight: strokeWeight,\r\n\t\t    map: this.map\r\n\t\t});\r\n\r\n        return polygon\r\n\t}\r\n}\r\n\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t\n\n//# sourceURL=webpack://wheel_we_go/./js/extendsTools/drawShape.js?");

/***/ }),

/***/ "./js/extendsTools/initmap.js":
/*!************************************!*\
  !*** ./js/extendsTools/initmap.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InitMap: () => (/* binding */ InitMap)\n/* harmony export */ });\nclass InitMap {\r\n    constructor() {\r\n      \r\n    }\r\n  \r\n    createTmap(lat, lon) {\r\n        try {\r\n            return new Promise((resolve, reject)=>{\r\n                let map = new Tmapv3.Map(\"map_div\", {\r\n                    center: new Tmapv3.LatLng(lat, lon),\r\n                    width: \"100vw\",\r\n                    height: \"100vh\",\r\n                    zoom: 18,\r\n                    scaleBar: true\r\n                });\r\n                \r\n                console.log(\"맵 만드는 중 ...\");\r\n                resolve(map);\r\n            });\r\n        } catch (error) {\r\n            console.error('지도 초기화 중 오류 발생:', error);\r\n            return null;\r\n        }\r\n    }\r\n    \r\n    updateMap(map, lat, lon){\r\n        const newcenter = new Tmapv3.LatLng(lat, lon);\r\n        map.setCenter(newcenter);\r\n\r\n        return map;\r\n    }\r\n\r\n    setMapCenter(map, lat, lon){\r\n        const position = new Tmapv3.LatLng(lat, lon);\r\n        map.setCenter(position);\r\n    }\r\n\r\n    createMark(map, lat, lon){\r\n        const position = new Tmapv3.LatLng(lat,lon);\r\n        const marker = new Tmapv3.Marker({\r\n            position : position,\r\n            map : map\r\n        });\r\n\r\n        return marker;\r\n    }\r\n    \r\n}\n\n//# sourceURL=webpack://wheel_we_go/./js/extendsTools/initmap.js?");

/***/ }),

/***/ "./js/extendsTools/loading.js":
/*!************************************!*\
  !*** ./js/extendsTools/loading.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Loading: () => (/* binding */ Loading)\n/* harmony export */ });\nclass Loading{\r\n    constructor(){\r\n\r\n        this.cautions = [];\r\n    }\r\n\r\n    loadAppear(){\r\n        const loader = document.querySelector('.loader');\r\n        const loader_text = document.querySelector('.loader_text');\r\n        \r\n        loader.classList.toggle(\"unactive\", false);\r\n\r\n        const caution_text1 = setTimeout(()=>{\r\n            loader_text.textContent = \"혹시 건물 안 인가요? 건물안은 좌표가 잘 안잡혀요ㅜㅜ\";\r\n        }, 5000);\r\n        this.cautions.push(caution_text1);\r\n\r\n        const caution_text2 = setTimeout(()=>{\r\n            loader_text.textContent = \"현재 좌표를 불러 올수 없어 기본 위치로 이동할게요.\";\r\n        }, 12000);\r\n        this.cautions.push(caution_text2);\r\n    }\r\n\r\n    loadDisAppear(){\r\n        const loader = document.querySelector('.loader');\r\n        const loader_text = document.querySelector('.loader_text');\r\n        \r\n        // 주의 문구 안나오게\r\n        this.cautions.forEach(element => {\r\n            clearTimeout(element);\r\n        });\r\n\r\n        setTimeout(()=>{\r\n            loader.classList.toggle(\"unactive\", true);\r\n            loader_text.textContent =\"현재 위치 좌표 불러오는 중 ...\"    \r\n        }, 3000);\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://wheel_we_go/./js/extendsTools/loading.js?");

/***/ }),

/***/ "./js/extendsTools/navi.js":
/*!*********************************!*\
  !*** ./js/extendsTools/navi.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Navi: () => (/* binding */ Navi)\n/* harmony export */ });\n/* harmony import */ var _drawShape_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./drawShape.js */ \"./js/extendsTools/drawShape.js\");\n/* harmony import */ var _initmap_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./initmap.js */ \"./js/extendsTools/initmap.js\");\n/* harmony import */ var _currentPos_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./currentPos.js */ \"./js/extendsTools/currentPos.js\");\n/* harmony import */ var _naviResult_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./naviResult.js */ \"./js/extendsTools/naviResult.js\");\n/* harmony import */ var _restApiData_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./restApiData.js */ \"./js/extendsTools/restApiData.js\");\n\r\n\r\n\r\n\r\n\r\n\r\nclass Navi {\r\n    constructor() {\r\n        this.drawTool = new _drawShape_js__WEBPACK_IMPORTED_MODULE_0__.DrawShape();\r\n        this.mapTool = new _initmap_js__WEBPACK_IMPORTED_MODULE_1__.InitMap();\r\n        this.currentPos = new _currentPos_js__WEBPACK_IMPORTED_MODULE_2__.CurrentPos();\r\n        this.naviResult = new _naviResult_js__WEBPACK_IMPORTED_MODULE_3__.NaviResult();\r\n        this.restApiData = new _restApiData_js__WEBPACK_IMPORTED_MODULE_4__.RestApiData();\r\n        this.username = this.getCurrentLoginUser();\r\n\r\n        this.currentLat, this.currentLon;\r\n        this.map;\r\n        this.marker_SE = \"\";  \r\n        this.markerObj;\r\n        this.marker_p1;\r\n        this.marker_p2;\r\n        this.polyline_;\r\n        this.markerImg = \"\";\r\n        this.pType = \"\";\r\n        this.size;\r\n        this.expectCoin;\r\n        this.expectTime;\r\n\r\n        this.totalMarkerArr = [];\r\n        this.drawInfoArr =[];\r\n        this.resultdrawArr = [];\r\n\r\n        // 트래킹 관련 변수\r\n        this.istracking = false;\r\n        this.trackingLines = [];\r\n        this.trackingCoords = [];\r\n        this.trackingMarkers = [];\r\n        this.trackingMarkersCoords = [];\r\n        \r\n\r\n        this.tracking_dis = 0;\r\n\r\n    }\r\n    \r\n    setMap(map){\r\n        this.map = map;\r\n        this.drawTool.setMap(map);\r\n    }\r\n\r\n    setPosition(lat, lon){\r\n        this.currentLat = lat;\r\n        this.currentLon = lon;\r\n    }\r\n\r\n    getCurrentLoginUser() {\r\n        let userinfo = document.getElementById('user-info');\r\n        let user = userinfo.dataset.username;\r\n        return user;\r\n    }\r\n\r\n\r\n    // 마커 버튼 클릭시 작동\r\n    clickMarkBtn(){\r\n        const marker = this.mapTool.createMark(this.map, this.currentLat, this.currentLon);\r\n        this.trackingMarkers.push(marker);\r\n        this.trackingMarkersCoords.push([this.currentLat, this.currentLon]);\r\n    }\r\n\r\n    // 날짜&시간 데이터 생성\r\n    createDateInfo(){\r\n        const now = new Date();\r\n\r\n        const dataInfo ={\r\n            year : now.getFullYear(), // 년도\r\n            month : now.getMonth() + 1, // 월 (0부터 시작하므로 +1)\r\n            day : now.getDate(), // 일\r\n            hour : now.getHours(), // 시간\r\n            minute : now.getMinutes(), // 분\r\n        }\r\n\r\n        return dataInfo \r\n    }\r\n\r\n    degreesToRadians(degrees) {\r\n        return degrees * (Math.PI / 180);\r\n    }\r\n      \r\n    //m 단위로 거리계산\r\n    caculateDistance(lat1, lon1, lat2, lon2) {\r\n        const earthRadiusMeters = 6371000;\r\n      \r\n        const dLat = this.degreesToRadians(lat2 - lat1);\r\n        const dLon = this.degreesToRadians(lon2 - lon1);\r\n      \r\n        const a =\r\n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n        Math.cos(this.degreesToRadians(lat1)) * Math.cos(this.degreesToRadians(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\r\n      \r\n        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n      \r\n        const distance = earthRadiusMeters * c;\r\n        return distance.toFixed(1);\r\n    }\r\n\r\n    //위경도에 따른 주소 가져오기\r\n    loadGetLonLatFromAddress(lat, lon) {\r\n        let headers = {};\r\n        headers[\"appKey\"] = \"l7xxed2c734830ae4364975ef11e67a76e81\";\r\n\r\n        return new Promise((resolve, reject)=>{\r\n            $.ajax({\r\n                method : \"GET\",\r\n                headers : headers,\r\n                url : \"https://apis.openapi.sk.com/tmap/geo/reversegeocoding?version=1&format=json&callback=result\",\r\n                async : false,\r\n                data : {\r\n                    \"coordType\" : \"WGS84GEO\",\r\n                    \"addressType\" : \"A10\",\r\n                    \"lon\" : lon,\r\n                    \"lat\" : lat\r\n                },\r\n                success : function(response) {\r\n                    // 3. json에서 주소 파싱\r\n                    let arrResult = response.addressInfo;\r\n\r\n                    //법정동 마지막 문자 \r\n                    let lastLegal = arrResult.legalDong\r\n                            .charAt(arrResult.legalDong.length - 1);\r\n\r\n                    // 새주소\r\n                    let newRoadAddr = arrResult.city_do + ' '\r\n                            + arrResult.gu_gun + ' ';\r\n\r\n                    \r\n                    if (arrResult.eup_myun == ''\r\n                            && (lastLegal == \"읍\" || lastLegal == \"면\")) {//읍면\r\n                        newRoadAddr += arrResult.legalDong;\r\n                    } else {\r\n                        newRoadAddr += arrResult.eup_myun;\r\n                    }\r\n                    newRoadAddr += ' ' + arrResult.roadName + ' '\r\n                            + arrResult.buildingIndex;\r\n\r\n                    // 새주소 법정동& 건물명 체크\r\n                    if (arrResult.legalDong != ''\r\n                            && (lastLegal != \"읍\" && lastLegal != \"면\")) {//법정동과 읍면이 같은 경우\r\n\r\n                        if (arrResult.buildingName != '') {//빌딩명 존재하는 경우\r\n                            newRoadAddr += (' (' + arrResult.legalDong\r\n                                    + ', ' + arrResult.buildingName + ') ');\r\n                        } else {\r\n                            newRoadAddr += (' (' + arrResult.legalDong + ')');\r\n                        }\r\n                    } else if (arrResult.buildingName != '') {//빌딩명만 존재하는 경우\r\n                        newRoadAddr += (' (' + arrResult.buildingName + ') ');\r\n                    }\r\n\r\n                    console.log(\"주소!!!! :\", newRoadAddr);\r\n                    resolve(newRoadAddr)\r\n                },\r\n                error : function(request, status, error) {\r\n                    console.log(\"code:\" + request.status + \"\\n\"\r\n                            + \"message:\" + request.responseText + \"\\n\"\r\n                            + \"error:\" + error);\r\n                }\r\n            });\r\n        });\r\n\r\n    }\r\n    //트래킹 시작\r\n    trackingPath(){\r\n        if(!this.istracking){\r\n            this.trackingData = {\r\n                startpoint: [0, 0],\r\n                endpoint : [0, 0],\r\n\r\n                startName : \"\",\r\n                endName : \"\",\r\n\r\n                AtTime : 0,\r\n                distance : 0.0,\r\n                coin : 0,\r\n                coords: [],\r\n                data_valid : 0,\r\n                markings : [],\r\n                markingStr : \"\",\r\n                date : \"\",\r\n            }\r\n\r\n            this.istracking = true;\r\n            \r\n            this.trackingLines = []; //트래킹 라인 초기화\r\n\r\n            //초 시계 초기화\r\n            this.costTime = 0;\r\n\r\n            // 거리 초기화\r\n            this.tracking_dis = 0;\r\n            \r\n            // 좌표 초기화 \r\n            let preLat = this.currentLat;\r\n            let preLon = this.currentLon;\r\n            \r\n            this.trackingCoords.push([preLat, preLon]);\r\n\r\n            // 라인 그리기 시작\r\n            this.track = setInterval(()=>{\r\n                console.log(\"현재위치 업데이트 되니? :\",this.currentLat, this.currentLon);\r\n                // 시간 계산\r\n                this.costTime += 1;\r\n                if(preLat == this.currentLat && preLat == this.currentLat){\r\n                    console.log(\"이전 좌표와 동일\");\r\n                }\r\n                else{\r\n                    //거리계산\r\n                    this.tracking_dis += this.caculateDistance(preLat, preLon, this.currentLat, this.currentLon);\r\n                    \r\n                    //선 그리기\r\n                    const polyline = this.drawTool.addPolyline(preLat, preLon, this.currentLat, this.currentLon);\r\n                    preLat = this.currentLat;\r\n                    preLon = this.currentLon;\r\n\r\n                    this.trackingCoords.push([preLat, preLon]);\r\n                    this.trackingLines.push(polyline);\r\n                }\r\n            },1000);\r\n        }\r\n    }\r\n\r\n    // 트래킹 종료 -> 트래킹 데이터 반환\r\n    endTrackingPath(){\r\n        this.istracking = false \r\n        clearInterval(this.track); // 선그리기 인터벌 종료\r\n    }\r\n\r\n    // tracking 데이터 생성\r\n    async createTrackingData(){\r\n        //날짜 정보 생성\r\n        const currentDate = this.createDateInfo();\r\n\r\n        //코인 계산\r\n        const coin = Math.floor((this.tracking_dis / 1000).toFixed(1) * 10);\r\n\r\n        // 시작 주소 string & 마지막 주소 string\r\n        const startpoint = this.trackingCoords[0];\r\n        const endpoint = this.trackingCoords[this.trackingCoords.length -1];\r\n\r\n        let start_str=\"\";\r\n        let end_str =\"\";\r\n        return this.loadGetLonLatFromAddress(startpoint[0], startpoint[1])\r\n        .then((start_addr_str)=>{\r\n            start_str = start_addr_str;\r\n\r\n            //끝나는 지점 이름 받기\r\n            this.loadGetLonLatFromAddress(endpoint[0], endpoint[1])\r\n            .then((end_addr_str)=>{\r\n                end_str = end_addr_str;\r\n            });   \r\n        })\r\n        .then(()=>{\r\n            console.log(\"으아아아\",start_str, end_str);\r\n\r\n\r\n            //데이터 저장 하기\r\n            const markerStr = this.naviResult.getMarkerStr();\r\n            this.trackingData = {\r\n                startpoint: startpoint,\r\n                endpoint : endpoint,\r\n\r\n                startName : start_str, \r\n                endName : end_str,\r\n\r\n                AtTime : this.costTime, //int\r\n                distance : this.tracking_dis, //float\r\n                coin : coin,//int\r\n                coords: this.trackingCoords,//[[lat,lon],[...]....]\r\n                data_valid : 0,//int 0~1\r\n                markings : this.trackingMarkersCoords, //coords 동일\r\n                markingStr : markerStr, //string\r\n                date : currentDate, //날짜\r\n            }\r\n\r\n            const saveJsonData = JSON.stringify(this.trackingData);\r\n            \r\n            console.log(saveJsonData);\r\n            \r\n            let saveData = {\r\n                user_id : this.username,\r\n                earnedCoin : coin,\r\n                info : saveJsonData,\r\n            }\r\n            saveData = JSON.stringify(saveData);\r\n\r\n            return saveData;\r\n        })\r\n    }\r\n\r\n    // tracking 라인 삭제\r\n    eraseTrackingLine(){\r\n        //데이터 초기화\r\n        this.costTime = 0;\r\n        this.tracking_dis = 0;\r\n\r\n        // 라인 지우기\r\n        this.trackingLines.forEach(element => {\r\n            element.setMap(null);\r\n        });\r\n        this.trackingLines = [];\r\n    }\r\n\r\n\r\n    navi(navi_info){\r\n        const startLat = navi_info[0].latitude;\r\n        const startLng = navi_info[0].longitude;\r\n        const endLat = navi_info[1].latitude;\r\n        const endLng = navi_info[1].longitude;\r\n        // 기존 그려진 라인 & 마커가 있다면 초기화\r\n        this.eraseLineMarks()\r\n\r\n        // 시작 도착 심볼 찍기\r\n        this.marker_SE = \"S\"\r\n        this.makeMark(startLat, startLng);\r\n        // 도착 심볼 찍기\r\n        this.marker_SE = \"E\"\r\n        this.makeMark(endLat, endLng);\r\n\r\n        const headers = {}; \r\n\t\theaders[\"appKey\"]=\"l7xxed2c734830ae4364975ef11e67a76e81\";\r\n\r\n        return new Promise((resolve, reject)=>{\r\n            $.ajax({\r\n                method : \"POST\",\r\n                headers : headers,\r\n                url : \"https://apis.openapi.sk.com/tmap/routes/pedestrian?version=1&format=json&callback=result\",\r\n                async : false,\r\n                data : {\r\n                    \"startX\" : startLng.toString(),\r\n                    \"startY\" : startLat.toString(),\r\n                    \"endX\" : endLng.toString(),\r\n                    \"endY\" : endLat.toString(),\r\n                    \"reqCoordType\" : \"WGS84GEO\",\r\n                    \"resCoordType\" : \"EPSG3857\",\r\n                    \"startName\" : \"출발지\",\r\n                    \"endName\" : \"도착지\"\r\n                },\r\n                success : (response) => {\r\n                    const resultData = response.features;\r\n\r\n                    //결과 출력\r\n                    const tDistance = \"총 거리 : \"\r\n                            + ((resultData[0].properties.totalDistance) / 1000)\r\n                                    .toFixed(1) + \"km,\";\r\n                    const tTime = \" 총 시간 : \"\r\n                            + ((resultData[0].properties.totalTime) / 60)\r\n                                    .toFixed(0) + \"분\";\r\n                    console.log(tDistance + tTime);\r\n                    console.log(\"navi :\", this);\r\n                    this.expectCoin = Math.floor(((resultData[0].properties.totalDistance) / 1000).toFixed(1) * 10);\r\n                    this.expectTime = ((resultData[0].properties.totalTime) / 60).toFixed(0);\r\n                    console.log(\"coin :\", this.expectCoin);\r\n                    \r\n                    // $(\"#result\").text(tDistance + tTime);\r\n                    \r\n                    for ( let i in resultData) { //for문 [S]\r\n                        const geometry = resultData[i].geometry;\r\n                        const properties = resultData[i].properties;\r\n\r\n\r\n                        if (geometry.type == \"LineString\") {\r\n                            for ( const j in geometry.coordinates) {\r\n                                // 경로들의 결과값(구간)들을 포인트 객체로 변환 \r\n                                const latlng = new Tmapv3.Point(\r\n                                        geometry.coordinates[j][0],\r\n                                        geometry.coordinates[j][1]);\r\n                                // 포인트 객체를 받아 좌표값으로 변환\r\n                                const convertPoint = new Tmapv3.Projection.convertEPSG3857ToWGS84GEO(\r\n                                        latlng);\r\n                                // 포인트객체의 정보로 좌표값 변환 객체로 저장\r\n                                const convertChange = new Tmapv3.LatLng(\r\n                                        convertPoint._lat,\r\n                                        convertPoint._lng);\r\n                                \r\n                                // 배열에 담기\r\n                                this.drawInfoArr.push(convertChange);\r\n                            }\r\n                        } else {\r\n                            if (properties.pointType == \"S\") { //출발지 마커\r\n                                this.markerImg = \"http://tmapapi.sktelecom.com/upload/tmap/marker/pin_r_m_s.png\";\r\n                                this.pType = \"S\";\r\n                                this.size = new Tmapv3.Size(24, 38);\r\n                            } else if (properties.pointType == \"E\") { //도착지 마커\r\n                                this.markerImg = \"http://tmapapi.sktelecom.com/upload/tmap/marker/pin_r_m_e.png\";\r\n                                this.pType = \"E\";\r\n                                this.size = new Tmapv3.Size(24, 38);\r\n                            } \r\n                            else { //각 포인트 마커\r\n                                this.markerImg = \"http://topopen.tmap.co.kr/imgs/point.png\";\r\n                                this.pType = \"P\";\r\n                                this.size = new Tmapv3.Size(8, 8);\r\n                            }\r\n\r\n                            // 경로들의 결과값들을 포인트 객체로 변환 \r\n                            const latlon = new Tmapv3.Point(\r\n                                    geometry.coordinates[0],\r\n                                    geometry.coordinates[1]);\r\n\r\n                            // 포인트 객체를 받아 좌표값으로 다시 변환\r\n                            const convertPoint = new Tmapv3.Projection.convertEPSG3857ToWGS84GEO(latlon);\r\n                            \r\n\r\n                            const routeInfoObj = {\r\n                                markerImage : this.markerImg,\r\n                                lng : convertPoint._lng,\r\n                                lat : convertPoint._lat,\r\n                                pointType : this.pType\r\n                            };\r\n\r\n                            // Marker 추가\r\n                            this.marker_p = new Tmapv3.Marker({\r\n                            position : new Tmapv3.LatLng(\r\n                                    routeInfoObj.lat,\r\n                                    routeInfoObj.lng),\r\n                            icon : routeInfoObj.markerImage,\r\n                            iconSize : this.size,\r\n                            map : this.map\r\n                            });\r\n                            this.totalMarkerArr.push(this.marker_p);\r\n                        }\r\n                    }//for문 [E]\r\n                \r\n                    this.drawLine();\r\n                    resolve();\r\n                },\r\n                \r\n            }) \r\n        });\r\n    }\r\n    \r\n    makeMark(lat, lng){\r\n\r\n        if(this.marker_SE == \"S\"){ \r\n            this.markerObj = new Tmapv3.Marker(\r\n                {\r\n                    position : new Tmapv3.LatLng(lat, lng),\r\n                    icon : \"http://tmapapi.sktelecom.com/upload/tmap/marker/pin_r_m_s.png\",\r\n                    iconSize : new Tmapv3.Size(24, 38),\r\n                    map : this.map\r\n                }\r\n        )}else{ \r\n            this.markerObj = new Tmapv3.Marker(\r\n                {\r\n                    position : new Tmapv3.LatLng(lat, lng),\r\n                    icon : \"http://tmapapi.sktelecom.com/upload/tmap/marker/pin_r_m_e.png\",\r\n                    iconSize : new Tmapv3.Size(24, 38),\r\n                    map : this.map\r\n                }\r\n        )};\r\n        this.totalMarkerArr.push(this.markerObj);\r\n    }\r\n    \r\n    drawLine(){\r\n        this.polyline_ = new Tmapv3.Polyline({\r\n            path : this.drawInfoArr,\r\n            strokeColor : \"#027BFC\",\r\n            strokeWeight : 9,\r\n            direction : true,\r\n            map : this.map\r\n        });\r\n        this.resultdrawArr.push(this.polyline_);\r\n    }\r\n\r\n    eraseLineMarks(){\r\n        if(this.resultdrawArr.length > 0) {\r\n            for ( const i in this.resultdrawArr) {\r\n                this.resultdrawArr[i].setMap(null);\r\n            }\r\n            for ( const i in this.totalMarkerArr) {\r\n                this.totalMarkerArr[i].setMap(null);\r\n            }\r\n            this.resultdrawArr = [];\r\n        }\r\n        this.drawInfoArr = [];\r\n    }\r\n\r\n    getExpactCoin(){\r\n        return this.expectCoin\r\n    }\r\n\r\n    // navi 하단바 활성화 함수\r\n    onNaviFooter(naviMode){\r\n        const navi_footer = document.querySelector(\".navi_footer\");\r\n        const navi_terminate_btn = document.querySelector(\".navi_terminate_btn\");\r\n        const navi_marking_btn = document.querySelector(\".navi_marking_btn\");\r\n        const arrive_btn = document.querySelector(\".arrive_btn\");\r\n        const resultBoard = document.querySelector(\".resultBoard\");\r\n        const submit_result = document.querySelector(\".submit_result\");\r\n\r\n        //초기화\r\n        navi_footer.classList.toggle(\"unactive\", false); // 네비 footer 보이게 하기\r\n        navi_terminate_btn.classList.toggle(\"unactive\", true);\r\n        navi_marking_btn.classList.toggle(\"unactive\", true);\r\n        arrive_btn.classList.toggle(\"unactive\", true);\r\n\r\n        //경로 추적만일 경우 네비 지우기\r\n        if(naviMode == 2){\r\n            this.eraseLineMarks();\r\n        }\r\n\r\n        //일반 경로 안내 모드\r\n        if(naviMode == 1){\r\n            navi_terminate_btn.classList.toggle(\"unactive\", false);\r\n            arrive_btn.classList.toggle(\"unactive\", false);\r\n        }\r\n        \r\n        //트래킹만 하기 & 트래킹+경로안내\r\n        else{\r\n            navi_terminate_btn.classList.toggle(\"unactive\", false);\r\n            navi_marking_btn.classList.toggle(\"unactive\", false);\r\n            arrive_btn.classList.toggle(\"unactive\", false);\r\n        }\r\n      \r\n        // \"중단\" 버튼 클릭 시\r\n        navi_terminate_btn.addEventListener('click', ()=>{\r\n            this.abortRecord(naviMode); // 기록중지\r\n        });\r\n\r\n        // \"마킹 하기\" 버튼 클릭 시\r\n        navi_marking_btn.addEventListener('click', ()=>{\r\n            this.clickMarkBtn()\r\n        });\r\n\r\n        // \"도착\" 버튼 클릭 시\r\n        arrive_btn.addEventListener('click', ()=>{\r\n            if(naviMode == 1){\r\n                this.resetGnb();\r\n                this.eraseLineMarks();\r\n            }\r\n            else{\r\n                this.endTrackingPath(); // 트래킹 종료\r\n                this.eraseLineMarks(); // navi 라인 지우기\r\n                this.naviResult.initResultPage(); // 결과 페이지에 이전 정보 삭제\r\n\r\n\r\n                // 결과창에 표시될 데이터 요소들 삽입\r\n                this.naviResult.createResultSummaryBoard(true, this.trackingData.AtTime, this.trackingData.distance, this.trackingData.coin);\r\n                this.naviResult.createResultContentBoard(this.trackingMarkers);\r\n\r\n                resultBoard.classList.toggle(\"unactive\", false); // 결과창 화면 상에 표시\r\n\r\n                submit_result.addEventListener(\"click\", ()=>{ // 결과창의 \"데이터 저장하고 종료하기\" 버튼 를릭 시\r\n                    resultBoard.classList.toggle(\"unactive\", true); // 결과창 화면 끄기\r\n                    this.resultSaveSubmit();\r\n                });\r\n            }\r\n\r\n            navi_footer.classList.toggle(\"unactive\", true); // footer 안보이게 하기\r\n\r\n        });\r\n    }\r\n\r\n    // 기록 중단(네비, 트래킹)\r\n    abortRecord(navimode){\r\n        const navi_footer = document.querySelector(\".navi_footer\");\r\n        const abortRecordBackgroundBlur = document.querySelector(\".abortRecordBackgroundBlur\");\r\n        const abortRecordDeleteAbortBtn = document.querySelector(\".abortRecordDeleteAbortBtn\");\r\n        const abortRecordSaveAbortBtn = document.querySelector(\".abortRecordSaveAbortBtn\");\r\n        const abortRecordBackBtn = document.querySelector(\".abortRecordBackBtn\");\r\n        const abortRecordAbortBtn = document.querySelector(\".abortRecordAbortBtn\");\r\n        const resultBoard = document.querySelector(\".resultBoard\");\r\n        const submit_result = document.querySelector(\".submit_result\");\r\n\r\n        //초기화\r\n        abortRecordBackgroundBlur.classList.toggle(\"unactive\", false); // 블러 보이게 하기\r\n        abortRecordDeleteAbortBtn.classList.toggle(\"unactive\", true);\r\n        abortRecordSaveAbortBtn.classList.toggle(\"unactive\", true);\r\n        abortRecordBackBtn.classList.toggle(\"unactive\", true);\r\n        abortRecordAbortBtn.classList.toggle(\"unactive\", true);\r\n\r\n        //일반 경로만 네비 \r\n        if(navimode == 1){\r\n            abortRecordAbortBtn.classList.toggle(\"unactive\", false);\r\n            abortRecordBackBtn.classList.toggle(\"unactive\", false);\r\n        }\r\n        else{\r\n            abortRecordDeleteAbortBtn.classList.toggle(\"unactive\", false);\r\n            abortRecordSaveAbortBtn.classList.toggle(\"unactive\", false);\r\n            abortRecordBackBtn.classList.toggle(\"unactive\", false);\r\n        }\r\n\r\n        // \"기록 삭제하고 중단하기\" 버튼 클릭 시\r\n        abortRecordDeleteAbortBtn.addEventListener('click', ()=>{\r\n            this.endTrackingPath(); // 트래킹 종료\r\n            this.eraseTrackingLine();\r\n\r\n            this.eraseLineMarks();\r\n            this.resetGnb();\r\n            navi_footer.classList.toggle(\"unactive\", true);\r\n            this.resetMarkers();\r\n            abortRecordBackgroundBlur.classList.toggle(\"unactive\", true);\r\n        });\r\n\r\n        // \"기록 저장하고 중단하기\" 버튼 클릭 시\r\n        abortRecordSaveAbortBtn.addEventListener('click', ()=>{\r\n            this.endTrackingPath(); // 트래킹 종료\r\n            this.eraseLineMarks();\r\n\r\n            this.naviResult.initResultPage(); // 결과 페이지에 이전 정보 삭제\r\n\r\n            abortRecordBackgroundBlur.classList.toggle(\"unactive\", true);\r\n            // 결과창에 표시될 데이터 요소들 삽입\r\n            this.naviResult.createResultSummaryBoard(true, this.trackingData.AtTime, this.trackingData.distance, this.trackingData.coin);\r\n            this.naviResult.createResultContentBoard(this.trackingMarkers);\r\n\r\n            resultBoard.classList.toggle(\"unactive\", false); // 결과창 화면 상에 표시\r\n            navi_footer.classList.toggle(\"unactive\", true); // footer 안보이게 하기\r\n            submit_result.addEventListener(\"click\", ()=>{ // 결과창의 \"데이터 저장하고 종료하기\" 버튼 를릭 시\r\n                resultBoard.classList.toggle(\"unactive\", true); // 결과창 화면 끄기\r\n                        this.resultSaveSubmit();                    \r\n            });\r\n\r\n        });\r\n\r\n        // \"돌아가기\" 버튼 클릭 시\r\n        abortRecordBackBtn.addEventListener('click', ()=>{\r\n            abortRecordBackgroundBlur.classList.toggle(\"unactive\", true);\r\n\r\n        });\r\n\r\n        // navi 중단하기(tracking 없음)\r\n        abortRecordAbortBtn.addEventListener(\"click\", ()=>{\r\n            abortRecordBackgroundBlur.classList.toggle(\"unactive\", true);\r\n            this.eraseLineMarks();\r\n            \r\n            //gnb 초기화\r\n            this.resetGnb();\r\n\r\n            navi_footer.classList.toggle(\"unactive\", true);\r\n        });\r\n    }\r\n\r\n    resetGnb(){\r\n        const gnb = document.querySelector(\".gnb\");\r\n        const search = document.querySelector(\".search\");\r\n        const search_navi = document.querySelector(\".search_navi\");\r\n        const searchBoxs = document.querySelectorAll(\".searchBox\");\r\n        const searchCancle = document.querySelector(\".search_cancle\");\r\n        const sideBarBtn = document.querySelector(\".sideBarBtn\");\r\n        const sideBar = document.querySelector(\".sideBar\");\r\n\r\n        gnb.classList.toggle(\"search_gnb\", false);\r\n        search.classList.toggle(\"unactive\", false);\r\n        search_navi.classList.toggle(\"unactive\", true);\r\n        searchCancle.classList.toggle(\"unactive\", true);\r\n        sideBarBtn.classList.toggle(\"unactive\", false);\r\n        sideBar.classList.toggle(\"unactive\", true);\r\n\r\n        //검색어 초기화\r\n        searchBoxs.forEach(element => {\r\n            element.value = \"\";\r\n        });\r\n    }\r\n\r\n    resetMarkers(){\r\n        this.trackingMarkers.forEach(element => {\r\n            element.setMap(null);\r\n        });\r\n    }\r\n\r\n    // \"데이터 저장하고 종료하기\" 버튼 클릭 시\r\n    resultSaveSubmit(){\r\n        const dataRecordAbortblur = document.querySelector(\".dataRecordAbortblur\");\r\n        const submitResultAbortBtn = document.querySelector(\".submitResultAbortBtn\");\r\n        const myDataBtn = document.querySelector(\".myDataBtn\");\r\n        \r\n        dataRecordAbortblur.classList.toggle(\"unactive\", false);\r\n\r\n        myDataBtn.addEventListener(\"click\", ()=>{\r\n            this.createTrackingData().then((saveData)=>{\r\n                this.restApiData.createSaveRecord(saveData); // 트래킹 데이터 DB 저장\r\n                this.eraseTrackingLine(); // 트래킹 라인 삭제\r\n                this.resetMarkers(); // 트래킹 마커들 삭제\r\n                dataRecordAbortblur.classList.toggle(\"unactive\", true); // 마지막 화면 끄기\r\n                this.resetGnb(); // main 페이지의 초기 화면으로 세팅\r\n\r\n                window.location.href = \"http://127.0.0.1:8000/mydata\";\r\n            }); // 트래킹 데이터 생성\r\n        });\r\n\r\n        submitResultAbortBtn.addEventListener(\"click\", ()=>{\r\n            this.createTrackingData().then((saveData)=>{\r\n                // this.restApiData.createSaveRecord(saveData);\r\n                this.eraseTrackingLine(); // 트래킹 라인 삭제\r\n                this.resetMarkers(); // 트래킹 마커들 삭제\r\n                dataRecordAbortblur.classList.toggle(\"unactive\", true); // 마지막 화면 끄기\r\n                this.resetGnb(); // main 페이지의 초기 화면으로 전환\r\n            });\r\n        });   \r\n    }\r\n}\n\n//# sourceURL=webpack://wheel_we_go/./js/extendsTools/navi.js?");

/***/ }),

/***/ "./js/extendsTools/naviDataCaution.js":
/*!********************************************!*\
  !*** ./js/extendsTools/naviDataCaution.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NaviDataCaution: () => (/* binding */ NaviDataCaution)\n/* harmony export */ });\n/* harmony import */ var _restApiData_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./restApiData.js */ \"./js/extendsTools/restApiData.js\");\n/* harmony import */ var _navi_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./navi.js */ \"./js/extendsTools/navi.js\");\n\r\n\r\n\r\n\r\nclass NaviDataCaution{\r\n    constructor(){\r\n        this.map;\r\n\r\n        this.dataTool = new _restApiData_js__WEBPACK_IMPORTED_MODULE_0__.RestApiData();\r\n        this.naviTool = new _navi_js__WEBPACK_IMPORTED_MODULE_1__.Navi();\r\n\r\n        this.isNavi = false;\r\n        this.expectCoin;\r\n        this.currentLat, this.currentLon;\r\n    }\r\n\r\n    setMap(map){\r\n        this.map = map;\r\n    }\r\n\r\n    setExpectCoin(coin){\r\n        this.expectCoin = coin;\r\n    }\r\n    setLocation(lat, lon){\r\n        this.currentLat = lat;\r\n        this.currentLon = lon;\r\n    }\r\n    \r\n    naviDataCaution(){\r\n        return new Promise((resolve, reject)=>{\r\n            this.dataTool.getRegionData()\r\n            .then((data) => {\r\n                const getData = data\r\n                // 가져온 데이터 활용\r\n                console.log(\"현재 좌표 주소 : \", this.currentLat, this.currentLon);\r\n                this.naviTool.loadGetLonLatFromAddress(this.currentLat, this.currentLon)\r\n                .then((currentAddress)=>{\r\n\r\n                    // 검색창에 있는 현재 위치(출발 위치 string)\r\n                    const currentAddressName = currentAddress.split(\" \")[0] + \" \" + currentAddress.split(\" \")[1]\r\n                    console.log(\"현재 주소 이름 : \", currentAddressName);\r\n                    const regionsModel = getData.find(regions => regions.regions === currentAddressName);\r\n                    console.log(\"regionsModel\", regionsModel);\r\n                    \r\n                    const backgroundBlur = document.querySelector(\".backgroundBlur\");\r\n                    const lowData = document.querySelector(\".lowData\");\r\n                    const iffyData = document.querySelector(\".iffyData\");\r\n                    const enoughData = document.querySelector(\".enoughData\");\r\n                    const coin1 = document.querySelector(\".coin1\");\r\n                    const coin2 = document.querySelector(\".coin2\");\r\n                    const coin3 = document.querySelector(\".coin3\");\r\n                    const dataCount1 = document.querySelector(\".dataCount1\");\r\n                    const dataCount2 = document.querySelector(\".dataCount2\");\r\n                    const dataCount3 = document.querySelector(\".dataCount3\");\r\n            \r\n                    backgroundBlur.classList.toggle(\"unactive\", false);\r\n\r\n                    // 데이터의 총 km를 기준으로 출력 화면 변화\r\n                    if( regionsModel.kms <= 10) {\r\n                        lowData.classList.toggle(\"unactive\", false); // low O\r\n                        iffyData.classList.toggle(\"unactive\", true); // iffy X\r\n                        enoughData.classList.toggle(\"unactive\", true); // enough X\r\n                        \r\n                        dataCount1.textContent = `${regionsModel.stacks}`;\r\n                        coin1.textContent = `${this.expectCoin}`;\r\n\r\n                    }\r\n                    else if((10 < regionsModel.kms) && (regionsModel.kms < 100)) {\r\n                        lowData.classList.toggle(\"unactive\", true); // low X\r\n                        iffyData.classList.toggle(\"unactive\", false); // iffy O\r\n                        enoughData.classList.toggle(\"unactive\", true); // enough X\r\n\r\n                        dataCount2.textContent = `${regionsModel.stacks}`;\r\n                        coin2.textContent = `${this.expectCoin}`;\r\n                    }\r\n                    else {\r\n                        lowData.classList.toggle(\"unactive\", true); // low X\r\n                        iffyData.classList.toggle(\"unactive\", true); // iffy X\r\n                        enoughData.classList.toggle(\"unactive\", false); // enough O\r\n                        \r\n                        dataCount3.textContent = `${regionsModel.stacks}`;\r\n                        coin3.textContent = `${this.expectCoin}`;\r\n                    }\r\n                    resolve();\r\n                })\r\n            .catch(error => {\r\n                console.error('There was a problem fetching the data:', error);\r\n            });\r\n        })\r\n    });   \r\n}};\n\n//# sourceURL=webpack://wheel_we_go/./js/extendsTools/naviDataCaution.js?");

/***/ }),

/***/ "./js/extendsTools/naviResult.js":
/*!***************************************!*\
  !*** ./js/extendsTools/naviResult.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NaviResult: () => (/* binding */ NaviResult)\n/* harmony export */ });\n/* harmony import */ var _restApiData_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./restApiData.js */ \"./js/extendsTools/restApiData.js\");\n\r\n\r\nclass NaviResult{\r\n    constructor(){\r\n        this.dataTool = new _restApiData_js__WEBPACK_IMPORTED_MODULE_0__.RestApiData();\r\n        \r\n        this.markString = [];\r\n\r\n        /* ---------- 마킹 지역 만들때 사용 ------------- */\r\n        this.allPageNum = [];\r\n\r\n        /* ---------- 테스트 코드 ------------- */\r\n        // const markers = [\"1\", \"2\", \"3\", \"4\", \"5\"];\r\n        // this.createResultSummaryBoard(true, 16, 2.4, 24);\r\n        // this.createResultContentBoard(markers);\r\n\r\n    }\r\n\r\n    // 페이지 초기화\r\n    initResultPage(){\r\n        this.markString = [];\r\n        this.allPageNum = [];\r\n\r\n        const marking_state = document.querySelector(\".marking_state\");\r\n        const marking_state_page = document.querySelector(\".marking_state_page\");\r\n\r\n        marking_state.innerHTML = \"\";\r\n        marking_state_page.innerHTML =\"\";\r\n\r\n    }\r\n\r\n    // 결과 보드 창 끄기\r\n    unactiveResultBoard(){\r\n        const resultBoard = document.querySelector(\".resultBoard\");\r\n\r\n        this.initResultPage();\r\n        resultBoard.classList.toggle(\"unactivate\", true)\r\n    }\r\n\r\n    // map 위치 설정\r\n    settingMapPosition(){\r\n\r\n    }\r\n\r\n    // Summary 결과창 만드는 것\r\n    createResultSummaryBoard(data_valid, time, distance, coin){\r\n        console.log(\"여기 안되남...\");\r\n        const data_valid_item = document.querySelector('.data_valid_item');\r\n        const data_time_item = document.querySelector('.data_time_item');\r\n        const data_distance_item = document.querySelector('.data_distance_item');\r\n        const data_coin_item = document.querySelector('.data_coin_item');\r\n\r\n        //data_valid가 true 이면 정상 false 오류\r\n        if(data_valid){\r\n            data_valid_item.textContent = \"정상\";\r\n        }else{\r\n            data_valid_item.textContent = \"오류\";\r\n        }\r\n\r\n        // 시간 데이터\r\n        data_time_item.textContent = `${time}`;\r\n\r\n        // 이동 거리\r\n        data_distance_item.textContent = `${distance}`;\r\n\r\n        //코인\r\n        data_coin_item.textContent = `${coin}`;\r\n    }\r\n\r\n    //result content 창\r\n    createResultContentBoard(markers){\r\n        const marking_state = document.querySelector('.marking_state');\r\n        let pageNum = 0;\r\n        let marking_group;\r\n\r\n        const marker_length = markers.length;\r\n\r\n        for(let i = 0; i < marker_length; i++){\r\n            this.markString.push(\"\");\r\n            if(i % 3 == 0){\r\n                if(marking_group){\r\n                    marking_state.appendChild(marking_group);\r\n                    pageNum++;\r\n                }\r\n\r\n                marking_group = document.createElement(\"div\");\r\n                marking_group.classList.add(\"marking_group\");\r\n                           \r\n            }\r\n\r\n            const newMarkItem = this.createMarkDiv(i+1);\r\n            marking_group.appendChild(newMarkItem);\r\n        }\r\n\r\n        if(marker_length % 4 != 0){\r\n            marking_state.appendChild(marking_group);\r\n            pageNum++;\r\n        }\r\n\r\n        marking_state.style.width = `${pageNum * 100}vw`;\r\n        \r\n        //page표시 만들기\r\n        const marking_state_page = document.querySelector(\".marking_state_page\");\r\n        for(let i = 1; i <= pageNum; i++){\r\n            const newPageNum = this.createPageNumDiv(i);\r\n            this.allPageNum.push(newPageNum);\r\n            marking_state_page.appendChild(newPageNum);\r\n        }\r\n        \r\n        if(this.allPageNum[0]){\r\n            this.allPageNum[0].classList.add(\"page_num_div_active\");\r\n        }\r\n    }\r\n\r\n    createPageNumDiv(num){\r\n        const pageNumDiv = document.createElement(\"div\");\r\n        pageNumDiv.classList.add(\"page_num_div\");\r\n\r\n        pageNumDiv.textContent = `${num}`;\r\n\r\n        const marking_state = document.querySelector('.marking_state');\r\n        \r\n        //번호 클릭\r\n        pageNumDiv.addEventListener(\"click\", ()=>{\r\n            marking_state.style.transform = `translateX(${(num-1)*-100}vw)`;\r\n            \r\n            this.allPageNum.forEach(element => {\r\n                element.classList.toggle(\"page_num_div_active\", false);\r\n            });\r\n            pageNumDiv.classList.add(\"page_num_div_active\");\r\n        });\r\n\r\n        return pageNumDiv;\r\n    }\r\n\r\n    createMarkDiv(num){\r\n        const markingDiv = document.createElement('div');\r\n        const number = document.createElement('div');\r\n        const pin = document.createElement('div');\r\n        const state = document.createElement('div');\r\n        const writeStateBtn = document.createElement('div');\r\n\r\n        markingDiv.classList.add('marking_div');\r\n        number.classList.add(\"number_div\");\r\n        pin.classList.add(\"pin_div\");\r\n        state.classList.add(\"state_div\");\r\n        writeStateBtn.classList.add(\"write_state_btn\");\r\n\r\n        writeStateBtn.textContent = \"사유작성\";\r\n        number.textContent = `${num}`;\r\n        pin.innerHTML = \"<i class='fa-solid fa-thumbtack'></i>\";\r\n\r\n        markingDiv.appendChild(number);\r\n        markingDiv.appendChild(pin);\r\n        markingDiv.appendChild(state);\r\n        markingDiv.appendChild(writeStateBtn);\r\n\r\n        writeStateBtn.addEventListener(\"click\", ()=>{\r\n            this.writeMarkingBoard(num);\r\n        })\r\n\r\n        return markingDiv;\r\n    }\r\n\r\n    // Markin 보드 활성화\r\n    writeMarkingBoard(num){\r\n        // 사유작성 클릭시\r\n        const title = document.querySelector(\".marking_write_title\");\r\n        const resultBoard = document.querySelector(\".resultBoard\");\r\n        const marking_write_board = document.querySelector(\".marking_write_board\");\r\n        \r\n        resultBoard.classList.toggle(\"unactive\", true);\r\n        marking_write_board.classList.toggle(\"unactive\", false);\r\n        title.textContent =`${num}번 마커`;\r\n\r\n        //cancle 버튼 초기화\r\n        const cancleBtn = document.querySelector(\".marking_write_cancle_btn\");\r\n        cancleBtn.replaceWith(cancleBtn.cloneNode(true));\r\n\r\n        //submit 버튼 초기화\r\n        const submitBtn = document.querySelector(\".marking_write_submit_btn\");\r\n        submitBtn.replaceWith(submitBtn.cloneNode(true));\r\n\r\n        this.clickMarkWriteBtns(num);\r\n    }\r\n\r\n    clickMarkWriteBtns(num){\r\n        const cancleBtn = document.querySelector(\".marking_write_cancle_btn\");\r\n        const submitBtn = document.querySelector(\".marking_write_submit_btn\");\r\n        const marking_write_content = document.querySelector(\".marking_write_content\");\r\n        \r\n        const marking_write_board = document.querySelector(\".marking_write_board\");\r\n        const resultBoard = document.querySelector(\".resultBoard\");\r\n\r\n        marking_write_content.value = this.markString[num-1];\r\n\r\n        \r\n        cancleBtn.addEventListener(\"click\", ()=>{\r\n            this.markString[num-1] = \"\";\r\n            this.writeTextinStateDiv(); \r\n\r\n            console.log(\"취소 버튼 : \",this.markString);\r\n\r\n            marking_write_board.classList.toggle(\"unactive\", true);\r\n            resultBoard.classList.toggle(\"unactive\", false);\r\n            marking_write_content.value = \"\";\r\n        });\r\n\r\n        \r\n        submitBtn.addEventListener(\"click\", ()=>{\r\n            this.markString[num-1] = marking_write_content.value;\r\n            this.writeTextinStateDiv(); //결과창에 마킹 글 쓰기\r\n\r\n\r\n            console.log(\"작성 버튼 : \",this.markString);\r\n\r\n            \r\n            marking_write_board.classList.toggle(\"unactive\", true);\r\n            resultBoard.classList.toggle(\"unactive\", false);\r\n            marking_write_content.value = \"\";\r\n\r\n        });\r\n    }\r\n\r\n    writeTextinStateDiv(){\r\n        const all_state_div = document.querySelectorAll(\".state_div\");\r\n        for(let i = 0; i < all_state_div.length; i++){\r\n            all_state_div[i].textContent = `${this.markString[i]}`;\r\n        }\r\n    }\r\n\r\n    setmarkString(markString){\r\n        this.markString = [...markString];\r\n    }\r\n\r\n    getMarkerStr(){\r\n        const result = this.markString.join('|');\r\n        return result;\r\n    }\r\n\r\n}\n\n//# sourceURL=webpack://wheel_we_go/./js/extendsTools/naviResult.js?");

/***/ }),

/***/ "./js/extendsTools/restApiData.js":
/*!****************************************!*\
  !*** ./js/extendsTools/restApiData.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RestApiData: () => (/* binding */ RestApiData)\n/* harmony export */ });\n\r\nclass RestApiData{\r\n    constructor(){\r\n\r\n\r\n    }\r\n    ///////////////////////////////////////////////////////////////////////\r\n    //////////////////////////  create data  //////////////////////////////\r\n    ///////////////////////////////////////////////////////////////////////\r\n    // 지역(Regions) 생성\r\n    async createRegion(regionData) {\r\n        const apiUrl = 'http://127.0.0.1:8000/api/regions/';\r\n\r\n        return fetch(apiUrl, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(regionData)\r\n        })\r\n\r\n        .then(response => response.json());\r\n    }\r\n\r\n    // 한 건 당(saveRecords) 생성\r\n    async createSaveRecord(saveRecordData) {\r\n        const apiUrl = 'http://127.0.0.1:8000/api/saveRecords/post';\r\n\r\n        return fetch(apiUrl, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(saveRecordData)\r\n        })\r\n\r\n        .then(response => response.json());\r\n\r\n    }\r\n\r\n\r\n    ///////////////////////////////////////////////////////////////////////\r\n    ///////////////////////////// read data ///////////////////////////////\r\n    ///////////////////////////////////////////////////////////////////////\r\n\r\n    // 지역 불러오기\r\n\r\n    getRegionData(){\r\n        return new Promise((resolve, reject)=>{\r\n            const apiUrl = 'http://127.0.0.1:8000/api/regions/?format=json';\r\n\r\n            // fetch 함수를 사용하여 데이터 가져오기\r\n            fetch(apiUrl)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                resolve(data);\r\n            });\r\n        });  \r\n    }\r\n    // 유저 불러오기\r\n    getUserData(){\r\n        return new Promise((resolve,reject)=>{\r\n            const apiUrl= 'http://127.0.0.1:8000/api/users/?format=json'\r\n\r\n            fetch(apiUrl)\r\n            .then(response => response.json())\r\n            .then(data=> {\r\n                resolve(data);\r\n            });\r\n        });\r\n    };\r\n    //기록 불러오기\r\n    getsaveRecordsData(){\r\n        return new Promise((resolve,reject)=>{\r\n            const apiUrl= 'http://127.0.0.1:8000/api/saveRecords/?format=json'\r\n\r\n            fetch(apiUrl)\r\n            .then(response => response.json())\r\n            .then(data=> {\r\n                resolve(data);\r\n            });\r\n        });\r\n    };\r\n\r\n    ///////////////////////////////////////////////////////////////////////\r\n    //////////////////////////  update data  //////////////////////////////\r\n    ///////////////////////////////////////////////////////////////////////\r\n\r\n    // 유저 정보 업데이트 \r\n    updateUser(userId, updatedUserData) {\r\n        return new Promise((resolve, reject) => {\r\n            const apiUrl = `http://127.0.0.1:8000/api/users/${userId}/`;\r\n\r\n            fetch(apiUrl, {\r\n                method: 'PUT',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(updatedUserData)\r\n            })\r\n\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                resolve(data);\r\n            });\r\n        });\r\n    }\r\n\r\n    // 지역(Regions) 정보 업데이트 \r\n    updateUser(regions, updatedUserData) {\r\n        return new Promise((resolve, reject) => {\r\n            const apiUrl = `http://127.0.0.1:8000/api/regionos/${regions}/`;\r\n\r\n            fetch(apiUrl, {\r\n                method: 'PUT',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(updatedUserData)\r\n            })\r\n\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                resolve(data);\r\n            });\r\n\r\n        });\r\n    }\r\n\r\n    // 한 건 당(saveRecords) 정보 업데이트 \r\n    updatesaveRecords(saveRecords, updatedUserData) {\r\n        return new Promise((resolve, reject) => {\r\n            const apiUrl = `http://127.0.0.1:8000/api/regionos/${saveRecords}/`;\r\n\r\n            fetch(apiUrl, {\r\n                method: 'PUT',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(updatedUserData)\r\n            })\r\n\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                resolve(data);\r\n            });\r\n\r\n        });\r\n    }\r\n\r\n}\r\n\n\n//# sourceURL=webpack://wheel_we_go/./js/extendsTools/restApiData.js?");

/***/ }),

/***/ "./js/extendsTools/search.js":
/*!***********************************!*\
  !*** ./js/extendsTools/search.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Search: () => (/* binding */ Search)\n/* harmony export */ });\n/* harmony import */ var _initmap_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./initmap.js */ \"./js/extendsTools/initmap.js\");\n/* harmony import */ var _navi_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./navi.js */ \"./js/extendsTools/navi.js\");\n/* harmony import */ var _naviDataCaution_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./naviDataCaution.js */ \"./js/extendsTools/naviDataCaution.js\");\n\r\n\r\n\r\n\r\nclass Search {\r\n    constructor() {\r\n        this.mapTool = new _initmap_js__WEBPACK_IMPORTED_MODULE_0__.InitMap();\r\n        this.naviTool = new _navi_js__WEBPACK_IMPORTED_MODULE_1__.Navi();\r\n\r\n        this.naviDataCautionTool = new _naviDataCaution_js__WEBPACK_IMPORTED_MODULE_2__.NaviDataCaution();\r\n\r\n        this.currentLat, this.currentLon;\r\n        this.map;\r\n\r\n        this.gnbMode = \"search\"; //\"search 와 navi 모드 있음\"\r\n        this.search_navi_info = [null, null];\r\n        this.markers = [];\r\n        this.naviMode; // 1 -> \"일반 경로 안내\"  | 2 -> \"이동 경로 기록하기\" | 3 -> \"기록하면서 경로 안내받기\"\r\n\r\n    }\r\n\r\n    setMap(map) {\r\n        this.map = map;\r\n        this.naviTool.setMap(map);\r\n\r\n    }\r\n\r\n    setPosition(lat, lon) {\r\n        this.currentLat = lat;\r\n        this.currentLon = lon;\r\n        this.naviTool.setPosition(lat, lon);\r\n        this.naviDataCautionTool.setLocation(lat, lon);\r\n    }\r\n\r\n    getList(lat, lng, search_word) {\r\n        return new Promise((resolve, reject) => {\r\n            let searchKeyword = search_word;\r\n            let headers = {};\r\n            headers[\"appKey\"] = \"l7xxed2c734830ae4364975ef11e67a76e81\";\r\n\r\n            $.ajax({\r\n                method: \"GET\",\r\n                headers: headers,\r\n                url: \"https://apis.openapi.sk.com/tmap/pois?version=1&format=json&callback=result\",\r\n                async: false,\r\n                data: {\r\n                    \"searchKeyword\": searchKeyword,\r\n                    \"centerLat\": lat,\r\n                    \"centerLon\": lng,\r\n                    \"resCoordType\": \"WGS84GEO\",\r\n                    \"reqCoordType\": \"WGS84GEO\",\r\n                    \"count\": 10\r\n                },\r\n                success: function (response) {\r\n                    let search_list = [];\r\n                    let search_coords = [];\r\n                    let search_tel = [];\r\n                    let search_addr = [];\r\n\r\n                    if (response) {\r\n                        let resultpoisData = response.searchPoiInfo.pois.poi;\r\n\r\n                        for (let k in resultpoisData) {\r\n                            let noorLat = Number(resultpoisData[k].noorLat);\r\n                            let noorLon = Number(resultpoisData[k].noorLon);\r\n                            let coords = {\r\n                                latitude: noorLat,\r\n                                longitude: noorLon,\r\n                            };\r\n\r\n                            let name = resultpoisData[k].name;\r\n\r\n                            let address = resultpoisData[k].middleAddrName + \" \" + resultpoisData[k].lowerAddrName + \" \" + resultpoisData[k].roadName;\r\n\r\n                            let tel = resultpoisData[k].telNo;\r\n\r\n                            search_list.push(name);\r\n                            search_coords.push(coords);\r\n                            search_addr.push(address);\r\n                            search_tel.push(tel);\r\n                        }\r\n\r\n                        const result = {\r\n                            name_list: search_list,\r\n                            coords: search_coords,\r\n                            addr: search_addr,\r\n                            tel: search_tel,\r\n                        };\r\n\r\n                        resolve(result);\r\n                    }\r\n                    else {\r\n                        const result = {\r\n                            name_list: search_list,\r\n                            coords: search_coords,\r\n                            addr: search_addr,\r\n                            tel: search_tel,\r\n                        };\r\n\r\n                        resolve(result);\r\n                    }\r\n                },\r\n                error: function (request, status, error) {\r\n                    console.log(\"code:\" + request.status + \"\\n\" + \"message:\" + request.responseText + \"\\n\" + \"error:\" + error);\r\n                    const result = {\r\n                        name_list: [],\r\n                        coords: [],\r\n                        addr: [],\r\n                        tel: [],\r\n                    };\r\n                    resolve(result);\r\n                }\r\n            });\r\n        });\r\n\r\n\r\n    }\r\n\r\n    focusSearchBox() {\r\n        const searchBoxs = document.querySelectorAll('.searchBox'); // 서치 input text\r\n        const searchIcon = document.querySelector('.searchIcon'); //돋보기 아이콘\r\n        const search_cancle = document.querySelector('.search_cancle'); // 취소 아이콘\r\n        const sideBarBtn = document.querySelector('.sideBarBtn'); // 햄버거\r\n        const search_result = document.querySelector('.search_result'); // 검색 결과창\r\n\r\n        const gnb = document.querySelector('.gnb');\r\n\r\n        // 검색 창 활성화\r\n        searchBoxs.forEach(ele => {\r\n            //검색 창 활성화 된 경우\r\n            ele.addEventListener(\"focus\", () => {\r\n                sideBarBtn.classList.toggle(\"unactive\", true);\r\n                searchIcon.classList.toggle('unactive', true);\r\n                search_cancle.classList.toggle(\"unactive\", false);\r\n                search_result.classList.toggle(\"unactive\", false);\r\n\r\n                gnb.classList.toggle(\"search_gnb\", true);\r\n\r\n                search_result.innerHTML = \"\"; //내용 제거\r\n                this.createCurPosSearchBlock(); //내 위치 넣기\r\n            });\r\n\r\n            // 검색어 입력시\r\n            this.preSearchWord = \"\";\r\n            this.searchtime; //setTimeout 함수\r\n            //검색 창에 검색어 입력시\r\n            ele.addEventListener('input', () => {\r\n\r\n                const value = ele.value;\r\n                console.log(\"검색어 : \", value);\r\n\r\n                // 3초간 입력된 글자가 바뀌지 않은 경우 검색 시작\r\n                if (this.searchtime) {\r\n                    clearTimeout(this.searchtime);\r\n                }\r\n\r\n                //검색 결과 표현\r\n                this.searchtime = setTimeout(() => {\r\n                    this.getList(this.currentLat, this.currentLon, value)\r\n\r\n                    .then((result)=>{\r\n                        const newresult = result;\r\n    \r\n                        search_result.innerHTML = \"\"; //내용 제거\r\n                        this.createCurPosSearchBlock(); //내 위치 넣기\r\n\r\n                        console.log(\"검색 결과 : \", newresult);\r\n    \r\n                        for(let i in newresult.name_list){\r\n                            const store_name = newresult.name_list[i];\r\n                            const store_latitude = newresult.coords[i].latitude;\r\n                            const store_longitude = newresult.coords[i].longitude;\r\n                            const store_addr = newresult.addr[i];\r\n                            const store_tel = newresult.tel[i]\r\n    \r\n                            const searchBlock = document.createElement('div');\r\n                            searchBlock.classList.add(\"searchBlock\");\r\n                            searchBlock.textContent = `${store_name}`;\r\n    \r\n                            search_result.appendChild(searchBlock);\r\n    \r\n                            // 검색 결과를 클릭 한 경우\r\n                            searchBlock.addEventListener('click',()=>{\r\n                                search_result.innerHTML = \"\"; //내용 제거\r\n                                this.createCurPosSearchBlock(); //내 위치 넣기\r\n\r\n                                sideBarBtn.classList.toggle(\"unactive\", false);\r\n                                searchIcon.classList.toggle('unactive', false);\r\n                                search_result.classList.toggle(\"unactive\", true);                \r\n    \r\n                                this.clickSearchBlock(store_latitude, store_longitude, store_name, store_addr, store_tel);\r\n                            });\r\n                        }\r\n                    });\r\n                },300);\r\n    \r\n            });\r\n        });\r\n\r\n        // 검색 취소 버튼 클릭\r\n        search_cancle.addEventListener('click', this.clickSearchCancleBtn.bind(this));\r\n    }\r\n\r\n\r\n    //수정\r\n    createCurPosSearchBlock(){\r\n        const search_result = document.querySelector('.search_result'); // 검색 결과창\r\n        const sideBarBtn = document.querySelector('.sideBarBtn');\r\n        const searchIcon = document.querySelector('.searchIcon');\r\n\r\n        const searchBlock = document.createElement('div');\r\n        searchBlock.classList.add(\"searchBlock\");\r\n        searchBlock.innerHTML = `<div class=\"search_cur_pos\">내 위치</div>`;\r\n    \r\n        search_result.appendChild(searchBlock);\r\n    \r\n        // 검색 결과를 클릭 한 경우\r\n        searchBlock.addEventListener('click',()=>{\r\n            const departures = document.querySelector(\".departures\");\r\n            const arrivals = document.querySelector(\".arrivals\");\r\n\r\n            search_result.innerHTML = \"\"; //내용 제거\r\n            this.createCurPosSearchBlock(); //내 위치 넣기\r\n\r\n            sideBarBtn.classList.toggle(\"unactive\", false);\r\n            searchIcon.classList.toggle('unactive', false);\r\n            search_result.classList.toggle(\"unactive\", true);   \r\n            \r\n            const marker = this.mapTool.createMark(this.map, this.currentLat, this.currentLon);\r\n            \r\n            if(this.search_navi_info[0] == null && this.search_navi_info[1] != null){\r\n                departures.value = `내 위치`;\r\n            }\r\n            else if(this.search_navi_info[1] == null && this.search_navi_info[0] != null){\r\n                arrivals.value = `내 위치`;\r\n            }\r\n\r\n            // 내위치 관련 블락 클릭 이벤트\r\n            this.naviTool.loadGetLonLatFromAddress(this.currentLat, this.currentLon).then((cur_addr)=>{\r\n                this.clickSearchBlock(this.currentLat, this.currentLon, \"내 위치\", cur_addr, \"\");\r\n            });\r\n        });\r\n    }\r\n\r\n    clickSearchCancleBtn(){\r\n        this.gnbMode = \"search\";\r\n        const search = document.querySelector('.search');\r\n        const searchBoxs = document.querySelectorAll('.searchBox');\r\n\r\n        const searchIcon = document.querySelector('.searchIcon');\r\n        const search_cancle = document.querySelector('.search_cancle');\r\n        const sideBarBtn = document.querySelector('.sideBarBtn');\r\n        const search_result = document.querySelector('.search_result');\r\n        const search_navi = document.querySelector('.search_navi');\r\n\r\n        const bottomBar = document.querySelector('.bottomBar'); // 하단바\r\n\r\n        const gnb = document.querySelector('.gnb');\r\n\r\n        sideBarBtn.classList.remove(\"unactive\");\r\n        searchIcon.classList.remove('unactive');\r\n        search_cancle.classList.add(\"unactive\");\r\n        search_result.classList.add(\"unactive\");\r\n\r\n        gnb.classList.remove(\"search_gnb\");\r\n\r\n        search.classList.toggle(\"unactive\", false);\r\n        search_navi.classList.toggle(\"unactive\", true);\r\n\r\n        bottomBar.classList.toggle(\"unactive\", false);\r\n\r\n\r\n        searchBoxs.forEach(element => {\r\n\r\n            element.value = \"\";\r\n        });\r\n\r\n        search_result.innerHTML = \"\"; //내용 제거\r\n        this.createCurPosSearchBlock(); //내 위치 넣기\r\n\r\n        this.search_navi_info = [null, null]; //검색 내용 초기화\r\n\r\n        this.eraseAllMarkers.bind(this); // 마커 지우기\r\n        this.markers = []; //마커 기록 지우기\r\n\r\n        this.naviTool.eraseLineMarks(); // 네비에서 생성한 마커, 라인 지우기\r\n\r\n        this.mapTool.setMapCenter(this.map, this.currentLat, this.currentLon);\r\n        console.log(\"설마 여기니?...\");\r\n        this.cautionAllUnactive(); // 네비 데이터 경고창이 떠있을 때 'X'버튼 클릭 시 경고창 사라지게 하기\r\n    }\r\n\r\n    //검색 결과중 하나 클릭시\r\n    clickSearchBlock(lat, lng, name, addr, tel) {\r\n        //gnb모드 변경\r\n        this.gnbMode = \"navi\";\r\n\r\n        //도착 지점과 시작 지점에 모두 값이 들어가면 Navi 시작\r\n        const gnb = document.querySelector(\".gnb\");\r\n        const departures = document.querySelector(\".departures\");\r\n        const arrivals = document.querySelector(\".arrivals\");\r\n        const search_cancle = document.querySelector(\".search_cancle\");\r\n\r\n        //둘다 검색어가 있는 경우\r\n        if (departures.value && arrivals.value ) {\r\n\r\n            gnb.classList.toggle(\"search_gnb\", true);\r\n            search_cancle.classList.toggle(\"unactive\", false);\r\n\r\n            const marker = this.mapTool.createMark(this.map, lat, lng);\r\n            this.markers.push(marker);\r\n\r\n            this.mapTool.setMapCenter(this.map, lat, lng);\r\n\r\n            // this.displayStoreInfo(lat, lng, name, addr, tel);\r\n\r\n            if (this.search_navi_info[0] == null) {\r\n                departures.value = `${name}`;\r\n                this.search_navi_info[0] = {\r\n                    name: name,\r\n                    latitude: lat,\r\n                    longitude: lng,\r\n                    marker: marker\r\n                }\r\n            }\r\n            else {\r\n                arrivals.value = `${name}`;\r\n                this.search_navi_info[1] = {\r\n                    name: name,\r\n                    latitude: lat,\r\n                    longitude: lng,\r\n                    marker: marker\r\n                }\r\n            }\r\n\r\n            // ------------------------------------------- Navi 시작 -------------------------------------------\r\n            console.log(\"내비 시작\");\r\n            this.eraseAllMarkers();\r\n\r\n\r\n            this.naviTool.navi(this.search_navi_info)\r\n                .then(() => {\r\n                    console.log(\"여기 실행 되니?\");\r\n                    const expect_coin = this.naviTool.getExpactCoin();\r\n                    this.naviDataCautionTool.setExpectCoin(expect_coin);\r\n                    this.naviDataCautionTool.naviDataCaution(this.search_navi_info)\r\n                        .then(() => {\r\n                            this.clickNaviCautionBtn();\r\n                        })\r\n                })\r\n\r\n        }\r\n        \r\n\r\n        //아직 길찾기가 아니야\r\n        else {\r\n            const search_navi = document.querySelector(\".search_navi\");\r\n            const search = document.querySelector(\".search\");\r\n            const placeInfo = document.querySelector('.placeInfo');\r\n            const searchItem = document.querySelector(\".searchItem\");\r\n\r\n            search_cancle.classList.toggle(\"unactive\", true);\r\n            search_navi.classList.toggle(\"unactive\", true);\r\n            search.classList.toggle(\"unactive\", false);\r\n            gnb.classList.toggle(\"search_gnb\", false);\r\n            placeInfo.classList.remove(\"unactive\");\r\n\r\n            searchItem.value = `${name}`;\r\n\r\n            this.eraseAllMarkers.bind(this);\r\n            this.search_marker = this.mapTool.createMark(this.map, lat, lng);\r\n            this.markers.push(this.search_marker);\r\n\r\n            this.mapTool.setMapCenter(this.map, lat, lng);\r\n\r\n            this.displayStoreInfo(lat, lng, name, addr, tel);\r\n        }\r\n    }\r\n\r\n    displayStoreInfo(lat, lng, name, addr, tel) {\r\n        const palceName = document.querySelector('.placeName');\r\n        const teldiv = document.querySelector('.tel');\r\n        const addrdiv = document.querySelector('.addr');\r\n        const startPointBtn = document.querySelector('.startPointBtn');\r\n        const endPointBtn = document.querySelector('.endPointBtn');\r\n\r\n        palceName.textContent = `${name}`;\r\n\r\n        if (tel != \"\") {\r\n            teldiv.textContent = `${tel}`;\r\n        }\r\n        else {\r\n            teldiv.textContent = \"전화번호 미등록\";\r\n        }\r\n\r\n        addrdiv.textContent = `${addr}`;\r\n\r\n        startPointBtn.addEventListener('click',\r\n            this.searchNavi.bind(this, false, name, lat, lng)\r\n        );\r\n\r\n        endPointBtn.addEventListener(\"click\",\r\n            this.searchNavi.bind(this, true, name, lat, lng)\r\n        );\r\n    }\r\n\r\n    // 길찾기 버튼(도착지로 설정, 출발지로 설정 버튼) 눌렀을 때\r\n    searchNavi(isArrival, name, lat, lng) {\r\n        const search_result = document.querySelector('.search_result');\r\n        const placeInfo = document.querySelector('.placeInfo');\r\n        const search_navi = document.querySelector('.search_navi');\r\n        const search = document.querySelector('.search');\r\n        const sideBarBtn = document.querySelector('.sideBarBtn');\r\n        const search_cancle = document.querySelector(\".search_cancle\");\r\n        const gnb = document.querySelector(\".gnb\");\r\n\r\n        search.classList.toggle(\"unactive\", true);\r\n        sideBarBtn.classList.toggle(\"unactive\", true);\r\n        search_navi.classList.toggle(\"unactive\", false);\r\n        search_cancle.classList.toggle(\"unactive\", false);\r\n        gnb.classList.toggle(\"search_gnb\", true);\r\n        placeInfo.classList.toggle(\"unactive\", true);\r\n        search_result.classList.toggle(\"unactive\", false);\r\n\r\n        const departures = document.querySelector('.departures');\r\n        const arrivals = document.querySelector('.arrivals');\r\n\r\n        //도착지 선택을 눌렀을 경우\r\n        if (isArrival) {\r\n            arrivals.value = `${name}`;\r\n            this.search_navi_info[1] = {\r\n                name: name,\r\n                latitude: lat,\r\n                longitude: lng,\r\n                marker: this.search_marker,\r\n            }\r\n        }\r\n        //출발지 선택을 눌렀을 경우\r\n        else {\r\n            departures.value = `${name}`;\r\n            this.search_navi_info[0] = {\r\n                name: name,\r\n                latitude: lat,\r\n                longitude: lng,\r\n                marker: this.search_marker,\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    eraseAllMarkers() {\r\n        console.log(\"마커 지우기 함수 실행! 하겠습닸!\");\r\n        this.markers.forEach(element => {\r\n            console.log(\"마커지우기 : \", element);\r\n            element.setMap(null);\r\n        });\r\n    }\r\n\r\n    cautionAllUnactive() { // 경고 페이지 요소들 전부 안보이게 하기\r\n        const backgroundBlur = document.querySelector(\".backgroundBlur\");\r\n        const lowData = document.querySelector(\".lowData\");\r\n        const iffyData = document.querySelector(\".iffyData\");\r\n        const enoughData = document.querySelector(\".enoughData\");\r\n\r\n        console.log(\"나 여깄다고!!!2\");\r\n        backgroundBlur.classList.toggle(\"unactive\", true);\r\n        lowData.classList.toggle(\"unactive\", true);\r\n        iffyData.classList.toggle(\"unactive\", true);\r\n        enoughData.classList.toggle(\"unactive\", true);\r\n\r\n    }\r\n\r\n    bottomBarAllUnactive() { // 하단바 요소들 전부 안보이게 하기\r\n        const bottomBar = document.querySelector(\".bottomBar\");\r\n        const fuctionDataRecord = document.querySelector(\".fuctionDataRecord\");\r\n        const functionRoadNavi = document.querySelector(\".functionRoadNavi\");\r\n        const funcitonArriveTime = document.querySelector(\".funcitonArriveTime\");\r\n        const functionGetCoin = document.querySelector(\".functionGetCoin\");\r\n\r\n        bottomBar.classList.toggle(\"unactive\", true);\r\n        fuctionDataRecord.classList.toggle(\"unactive\", true);\r\n        functionRoadNavi.classList.toggle(\"unactive\", true);\r\n        funcitonArriveTime.classList.toggle(\"unactive\", true);\r\n        functionGetCoin.classList.toggle(\"unactive\", true);\r\n    }\r\n\r\n    clickNaviCautionBtn() {\r\n        // \"일반 경로 안내받기\" 버튼\r\n        const naviDataCautionBtn_Start1 = document.querySelector(\".naviDataCautionBtn_Start1\");\r\n        const naviDataCautionBtn_Start2 = document.querySelector(\".naviDataCautionBtn_Start2\");\r\n        const naviDataCautionBtn_Start3 = document.querySelector(\".naviDataCautionBtn_Start3\");\r\n\r\n        // \"이동 경로 기록하기\" 버튼 \r\n        const naviDataCautionBtn_Record1 = document.querySelector(\".naviDataCautionBtn_Record1\");\r\n        const naviDataCautionBtn_Record2 = document.querySelector(\".naviDataCautionBtn_Record2\");\r\n\r\n        // \"기록하면서 경로 안내 받기\" 버튼\r\n        const naviDataCautionBtn_RecordNavi1 = document.querySelector(\".naviDataCautionBtn_RecordNavi1\");\r\n        const naviDataCautionBtn_RecordNavi2 = document.querySelector(\".naviDataCautionBtn_RecordNavi2\");\r\n\r\n        console.log(\"나 여깄다고!!!\");\r\n        naviDataCautionBtn_Start1.addEventListener('click', () => {\r\n            this.naviMode = 1;\r\n            this.cautionAllUnactive();\r\n            this.startNaviBottomBar();\r\n        });\r\n        naviDataCautionBtn_Start2.addEventListener('click', () => {\r\n            this.naviMode = 1;\r\n            this.cautionAllUnactive();\r\n            this.startNaviBottomBar();\r\n        });\r\n        naviDataCautionBtn_Start3.addEventListener('click', () => {\r\n            this.naviMode = 1;\r\n            this.cautionAllUnactive();\r\n            this.startNaviBottomBar();\r\n        });\r\n        naviDataCautionBtn_Record1.addEventListener('click', () => {\r\n            this.naviMode = 2;\r\n            this.naviTool.eraseLineMarks();\r\n            this.cautionAllUnactive();\r\n            this.startNaviBottomBar();\r\n        });\r\n        naviDataCautionBtn_Record2.addEventListener('click', () => {\r\n            this.naviMode = 2;\r\n            this.naviTool.eraseLineMarks();\r\n            this.cautionAllUnactive();\r\n            this.startNaviBottomBar();\r\n        });\r\n        naviDataCautionBtn_RecordNavi1.addEventListener('click', () => {\r\n            this.naviMode = 3;\r\n            this.cautionAllUnactive();\r\n            this.startNaviBottomBar();\r\n        });\r\n        naviDataCautionBtn_RecordNavi2.addEventListener('click', () => {\r\n            this.naviMode = 3;\r\n            this.cautionAllUnactive();\r\n            this.startNaviBottomBar();\r\n        });\r\n    }\r\n\r\n    // 네비게이션 '시작하기'버튼 페이지 관련 함수\r\n    startNaviBottomBar() {\r\n        const bottomBar = document.querySelector(\".bottomBar\");\r\n\r\n        const fuctionDataRecord = document.querySelector(\".fuctionDataRecord\");\r\n        const functionRoadNavi = document.querySelector(\".functionRoadNavi\");\r\n        const funcitonArriveTime = document.querySelector(\".funcitonArriveTime\");\r\n        const functionGetCoin = document.querySelector(\".functionGetCoin\");\r\n        const funcitonArriveTimeValue = document.querySelector(\".funcitonArriveTimeValue\");\r\n        const functionGetCoinValue = document.querySelector(\".functionGetCoinValue\");\r\n\r\n        const startBtn = document.querySelector(\".startBtn\");\r\n        const search_cancle = document.querySelector(\".search_cancle\");        \r\n\r\n\r\n        bottomBar.classList.toggle(\"unactive\", false); // 하단바 보이게 하기\r\n\r\n        if (this.naviMode == 1) { // \"일반 경로 안내받기\" 버튼\r\n            funcitonArriveTime.classList.toggle(\"unactive\", false); // \"도착 예상 시간\" 보이게 하기\r\n            console.log(\"expectTime : \", this.naviTool.expectTime);\r\n            funcitonArriveTimeValue.textContent = `${this.naviTool.expectTime}`;\r\n            functionGetCoinValue.textContent = `${this.naviDataCautionTool.expectCoin}`;\r\n\r\n            startBtn.addEventListener('click', () => { // \"시작하기\" 버튼 클릭\r\n                this.bottomBarAllUnactive();\r\n                this.naviTool.onNaviFooter(this.naviMode);\r\n                search_cancle.classList.toggle(\"unactive\", true); // 검색창에 \"X\" 버튼 없애기\r\n            });\r\n        }\r\n        else if (this.naviMode == 2) { // \"이동 경로 기록하기\" 버튼 \r\n            fuctionDataRecord.classList.toggle(\"unactive\", false);\r\n            funcitonArriveTime.classList.toggle(\"unactive\", false);\r\n            functionGetCoin.classList.toggle(\"unactive\", false);\r\n            console.log(\"expectTime : \", this.naviTool.expectTime);\r\n            funcitonArriveTimeValue.textContent = `${this.naviTool.expectTime}`;\r\n            functionGetCoinValue.textContent = `${this.naviDataCautionTool.expectCoin}`;\r\n\r\n            startBtn.addEventListener('click', () => {\r\n                this.bottomBarAllUnactive();\r\n                this.naviTool.onNaviFooter(this.naviMode);\r\n                this.naviTool.trackingPath();\r\n                search_cancle.classList.toggle(\"unactive\", true);\r\n            });\r\n        }\r\n        else { // \"기록하면서 경로 안내 받기\" 버튼\r\n            fuctionDataRecord.classList.toggle(\"unactive\", false);\r\n            functionRoadNavi.classList.toggle(\"unactive\", false); // \"휠체어 경로 안내\" 하기\r\n            funcitonArriveTime.classList.toggle(\"unactive\", false);\r\n            functionGetCoin.classList.toggle(\"unactive\", false);\r\n            console.log(\"expectTime : \", this.naviTool.expectTime);\r\n            funcitonArriveTimeValue.textContent = `${this.naviTool.expectTime}`;\r\n            functionGetCoinValue.textContent = `${this.naviDataCautionTool.expectCoin}`;\r\n\r\n            startBtn.addEventListener('click', () => {\r\n                this.bottomBarAllUnactive();\r\n                this.naviTool.onNaviFooter(this.naviMode);\r\n                this.naviTool.trackingPath();\r\n                search_cancle.classList.toggle(\"unactive\", true);\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n}\n\n//# sourceURL=webpack://wheel_we_go/./js/extendsTools/search.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./js/base.js");
/******/ 	
/******/ })()
;